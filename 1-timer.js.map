{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('button[data-start]');\nconst dateTimePicker = document.querySelector('#datetime-picker');\n\nlet selectedDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    selectedDate = selectedDates[0];\n\n    const currentDate = new Date();\n    if (selectedDate.getTime() <= currentDate.getTime()) {\n      startBtn = true;\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future!',\n        position: 'topRight',\n      });\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nconst daysEl = document.querySelector('.value[data-days]');\nconst hoursEl = document.querySelector('.value[data-hours]');\nconst minsEl = document.querySelector('.value[data-minutes]');\nconst secsEl = document.querySelector('.value[data-seconds]');\nfunction updateClock({ days, hours, mins, secs }) {\n  daysEl.textContent = `${days}`;\n  hoursEl.textContent = `${hours}`;\n  minsEl.textContent = `${mins}`;\n  secsEl.textContent = `${secs}`;\n}\n\nclass Timer {\n  constructor({ onTick }) {\n    this.isActive = false;\n    this.onTick = onTick;\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n\n    setInterval(() => {\n      const currentTime = Date.now();\n\n      const deltaTime = selectedDate - currentTime;\n      const time = this.getTime(deltaTime);\n      this.onTick(time);\n    }, 1000);\n  }\n  getTime(value) {\n    const days = this.pad(Math.floor(value / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((value % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const mins = this.pad(Math.floor((value % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((value % (1000 * 60)) / 1000));\n    return { days, hours, mins, secs };\n  }\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({\n  onTick: updateClock,\n});\n\nstartBtn.addEventListener('click', timer.start.bind(timer));\n"],"names":["startBtn","dateTimePicker","selectedDate","options","selectedDates","currentDate","iziToast","flatpickr","daysEl","hoursEl","minsEl","secsEl","updateClock","days","hours","mins","secs","Timer","onTick","currentTime","deltaTime","time","value","timer"],"mappings":"+IAKA,MAAMA,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAiB,SAAS,cAAc,kBAAkB,EAEhE,IAAIC,EAAe,KAEnB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAeE,EAAc,CAAC,EAE9B,MAAMC,EAAc,IAAI,KACpBH,EAAa,QAAO,GAAMG,EAAY,QAAO,IAC/CL,EAAW,GACXM,EAAS,MAAM,CACb,MAAO,QACP,QAAS,sCACT,SAAU,UAClB,CAAO,EAEJ,CACH,EAEAC,EAAUN,EAAgBE,CAAO,EAEjC,MAAMK,EAAS,SAAS,cAAc,mBAAmB,EACnDC,EAAU,SAAS,cAAc,oBAAoB,EACrDC,EAAS,SAAS,cAAc,sBAAsB,EACtDC,EAAS,SAAS,cAAc,sBAAsB,EAC5D,SAASC,EAAY,CAAE,KAAAC,EAAM,MAAAC,EAAO,KAAAC,EAAM,KAAAC,CAAI,EAAI,CAChDR,EAAO,YAAc,GAAGK,CAAI,GAC5BJ,EAAQ,YAAc,GAAGK,CAAK,GAC9BJ,EAAO,YAAc,GAAGK,CAAI,GAC5BJ,EAAO,YAAc,GAAGK,CAAI,EAC9B,CAEA,MAAMC,CAAM,CACV,YAAY,CAAE,OAAAC,GAAU,CACtB,KAAK,SAAW,GAChB,KAAK,OAASA,CACf,CAED,OAAQ,CACF,KAAK,WAIT,KAAK,SAAW,GAEhB,YAAY,IAAM,CAChB,MAAMC,EAAc,KAAK,MAEnBC,EAAYlB,EAAeiB,EAC3BE,EAAO,KAAK,QAAQD,CAAS,EACnC,KAAK,OAAOC,CAAI,CACjB,EAAE,GAAI,EACR,CACD,QAAQC,EAAO,CACb,MAAMT,EAAO,KAAK,IAAI,KAAK,MAAMS,EAAS,KAAoB,CAAC,EACzDR,EAAQ,KAAK,IACjB,KAAK,MAAOQ,GAAS,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,CACnE,EACUP,EAAO,KAAK,IAAI,KAAK,MAAOO,GAAS,IAAO,GAAK,KAAQ,IAAO,GAAG,CAAC,EACpEN,EAAO,KAAK,IAAI,KAAK,MAAOM,GAAS,IAAO,IAAO,GAAI,CAAC,EAC9D,MAAO,CAAE,KAAAT,EAAM,MAAAC,EAAO,KAAAC,EAAM,KAAAC,CAAI,CACjC,CACD,IAAIM,EAAO,CACT,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACrC,CACH,CAEA,MAAMC,EAAQ,IAAIN,EAAM,CACtB,OAAQL,CACV,CAAC,EAEDZ,EAAS,iBAAiB,QAASuB,EAAM,MAAM,KAAKA,CAAK,CAAC"}